# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 121 ', 'ASP', 0.014346878786291909, (-29.22599999999997, 37.97899999999998, -21.386999999999997)), ('A', ' 512 ', 'TYR', 0.03353052141204798, (-0.6399999999999996, 4.3, -34.921))]
data['omega'] = [('A', ' 535 ', 'PRO', None, (-8.714999999999986, 49.539999999999985, 2.052))]
data['rota'] = [('A', '  93 ', 'SER', 0.07447518827882767, (-25.755999999999986, 35.427, -14.061999999999998)), ('A', ' 207 ', 'GLU', 0.22016253516597253, (-38.829999999999984, 10.136999999999993, -28.331999999999997)), ('A', ' 227 ', 'THR', 0.08037889579588627, (-19.381, 20.894, -2.726)), ('A', ' 305 ', 'ILE', 0.10247996560116558, (-38.86099999999996, 27.822, -46.395)), ('A', ' 538 ', 'THR', 0.06899049727324429, (-6.812999999999989, 46.720000000000006, -8.104)), ('A', ' 544 ', 'VAL', 0.23343820830728457, (0.15699999999999534, 32.705, -18.375999999999998))]
data['cbeta'] = []
data['probe'] = [(' A 802  C8E  H13', ' A 802  C8E  H82', -0.838, (-6.005, 36.447, -39.985)), (' A 802  C8E  H13', ' A 802  C8E  H52', -0.707, (-6.334, 37.517, -40.523)), (' A 529  LYS  NZ ', ' A 538  THR HG22', -0.688, (-9.745, 47.641, -7.386)), (' A 227  THR HG23', ' A 243  ARG  HB3', -0.668, (-21.671, 23.877, -2.881)), (' A 150  GLN  NE2', ' A 152  TYR  OH ', -0.632, (-15.024, 3.845, -8.487)), (' A  89  GLY  C  ', ' A 293  MET  HE1', -0.612, (-33.839, 32.846, -11.059)), (' A 307  GLY  O  ', ' A 715  HOH  O  ', -0.611, (-35.345, 29.031, -51.159)), (' A 802  C8E  C1 ', ' A 802  C8E  H82', -0.596, (-5.408, 36.985, -39.489)), (' A 162  ASP  O  ', ' A 163  LYS  HB2', -0.593, (-42.575, 2.926, -33.751)), (' A 460  ARG  NH2', ' A 607  HOH  O  ', -0.591, (-14.599, 56.204, -23.535)), (' A 100  PRO  HG2', ' A 103  LEU HD12', -0.576, (-26.528, 17.135, -16.484)), (' A 422  PHE  CG ', ' A 801  C8E  H11', -0.575, (-11.781, 40.335, -45.512)), (' A 159  GLN  OE1', ' A 164  THR  O  ', -0.575, (-37.946, 3.419, -30.969)), (' A 574  GLU  HG2', ' A 579  TYR  O  ', -0.535, (-5.709, 31.398, -8.159)), (' A 379  PHE  CD2', ' A 380  ILE HD12', -0.526, (-13.457, 39.379, -53.727)), (' A 598  MTN  H71', ' A 806  C8E  H61', -0.517, (-34.881, 48.735, -36.639)), (' A 527  TYR  CE1', ' A 540  LYS  HG3', -0.51, (-2.89, 44.986, -15.282)), (' A 197  PHE  HD1', ' A 227  THR  HB ', -0.509, (-19.093, 21.117, -5.518)), (' A 555  VAL HG12', ' A 556  THR HG23', -0.507, (-9.305, -4.232, -26.65)), (' A  43  ASN  O  ', ' A  47  ARG  HG2', -0.49, (-13.5, 25.24, -20.032)), (' A 529  LYS  HZ3', ' A 538  THR HG22', -0.49, (-9.127, 47.517, -7.264)), (' A 348  VAL  O  ', ' A 348  VAL HG23', -0.477, (-28.333, 38.782, -53.758)), (' A 115  SER  HB2', ' A 392  SER  HA ', -0.475, (-31.056, 42.263, -27.416)), (' A 437  ARG HH21', ' A 460  ARG  HD3', -0.473, (-17.455, 53.513, -27.853)), (' A 373  THR HG22', ' A 374  SER  N  ', -0.469, (-28.591, 42.513, -41.259)), (' A 329  VAL  CG1', ' A 333  TYR  HE2', -0.467, (-37.735, 39.538, -2.897)), (' A 436  TYR  CZ ', ' A 463  GLY  HA3', -0.466, (-13.965, 42.287, -29.478)), (' A 443  LEU  O  ', ' A 456  GLU  O  ', -0.458, (-25.7, 51.818, -14.859)), (' A 544  VAL  CG2', ' A 571  LYS  HD2', -0.454, (0.679, 30.279, -15.799)), (' A 802  C8E  C8 ', ' A 802  C8E  H13', -0.452, (-6.583, 36.445, -39.752)), (' A 527  TYR  HD1', ' A 527  TYR  N  ', -0.45, (-6.287, 43.042, -15.283)), (' A 527  TYR  CD1', ' A 527  TYR  N  ', -0.448, (-6.295, 43.686, -15.216)), (' A  74  SER  HB2', ' A 394  LYS  HE2', -0.444, (-27.459, 39.38, -16.088)), (' A 114  ARG  HA ', ' A 372  GLN  OE1', -0.443, (-30.069, 38.618, -31.513)), (' A 529  LYS  HZ1', ' A 538  THR HG22', -0.43, (-9.567, 48.59, -7.345)), (' A 305  ILE  N  ', ' A 305  ILE HD13', -0.429, (-38.415, 27.03, -44.671)), (' A 167  THR  O  ', ' A 168  LEU HD23', -0.428, (-33.748, 7.189, -20.618)), (' A  19  ARG  HB2', ' A  26  THR HG21', -0.428, (-21.973, 28.252, -38.023)), (' A 267  THR HG22', ' A 298  VAL HG22', -0.427, (-45.391, 25.017, -22.148)), (' A 587  THR HG22', ' A 588  LEU  N  ', -0.426, (-8.108, 9.85, -16.512)), (' A 142  ALA  HA ', ' A 151  ASN  O  ', -0.424, (-16.147, 6.159, -14.068)), (' A 275  TYR  CE2', ' A 290  LEU HD22', -0.424, (-33.214, 24.087, 1.825)), (' A 452  LYS  O  ', ' A 454  TYR  CE1', -0.421, (-28.904, 53.293, -5.731)), (' A  42  VAL HG11', ' A  96  LEU HD13', -0.421, (-21.603, 24.77, -19.382)), (' A 383  TYR  CE2', ' A 801  C8E  H61', -0.42, (-9.375, 36.163, -49.887)), (' A 544  VAL HG23', ' A 571  LYS  CE ', -0.413, (1.981, 31.143, -15.517)), (' A  44  ASP  HA ', ' A  47  ARG  HG2', -0.404, (-12.6, 24.485, -19.816)), (' A 169  LEU  C  ', ' A 169  LEU HD23', -0.403, (-27.362, 8.952, -16.735)), (' A 348  VAL  CG2', ' A 348  VAL  O  ', -0.401, (-28.947, 38.725, -53.216))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
