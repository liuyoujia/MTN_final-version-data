# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  89 ', 'PRO', None, (11.129, -6.847, 7.951)), ('A', ' 100 ', 'PRO', None, (13.676999999999992, 6.688000000000001, -5.448)), ('A', ' 106 ', 'PRO', None, (8.616999999999997, 1.518, -15.695)), ('B', '  89 ', 'PRO', None, (1.6270000000000113, -6.656, 45.376)), ('B', ' 100 ', 'PRO', None, (2.09, 6.703, 31.743)), ('B', ' 106 ', 'PRO', None, (-4.978999999999994, 1.028, 23.145))]
data['rota'] = [('A', ' 172 ', 'GLU', 0.05566658232276128, (23.524, 19.95, 15.085999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 502  CAM  C4 ', ' A 502  CAM  C7 ', -1.644, (20.144, 0.256, -0.375)), (' B 502  CAM  C4 ', ' B 502  CAM  C7 ', -1.499, (9.946, 0.939, 35.776)), (' B 502  CAM  C1 ', ' B 502  CAM  C10', -1.472, (9.875, 1.667, 38.797)), (' A 502  CAM  C1 ', ' A 502  CAM  C10', -1.465, (19.437, 0.697, 2.579)), (' A 313  LYS  NZ ', ' A 747  HOH  O  ', -0.922, (-1.293, -17.153, -5.454)), (' A 163  PHE  CE2', ' A 246  LEU HD12', -0.833, (20.069, 13.655, 3.138)), (' B  99  ILE HG12', ' B 103  MET  HE3', -0.817, (-2.891, 7.412, 31.654)), (' B  68  GLY  HA3', ' B 331  GLU  OE2', -0.731, (14.2, -14.241, 27.552)), (' B  49  ASN  HB3', ' B 504  MTN  H81', -0.728, (15.65, -29.208, 40.073)), (' A 163  PHE  HE2', ' A 246  LEU HD12', -0.678, (20.665, 14.469, 3.669)), (' A 502  CAM  H32', ' A 502  CAM  H82', -0.66, (18.414, -0.212, -0.351)), (' B 177  LEU  O  ', ' B 181  THR HG23', -0.659, (10.006, 10.326, 46.065)), (' A 501  HEM HBB2', ' A 501  HEM HMB1', -0.656, (28.535, 0.19, -0.324)), (' A 502  CAM  C4 ', ' A 502  CAM  C8 ', -0.634, (19.336, 0.141, -0.137)), (' B 502  CAM  C4 ', ' B 502  CAM  C9 ', -0.619, (8.101, 0.51, 36.23)), (' A 131  ILE HG12', ' A 162 AILE HD13', -0.594, (32.895, 13.807, 0.743)), (' A 158  PHE  HB3', ' A 159  PRO  HD3', -0.593, (33.759, 10.456, 6.909)), (' B 158  PHE  HB3', ' B 159  PRO  HD3', -0.59, (23.662, 10.178, 40.579)), (' B  47  GLU  OE2', ' B 624  HOH  O  ', -0.587, (20.298, -21.435, 41.396)), (' B 164  MET  HE3', ' B 169  LEU  HB2', -0.581, (12.327, 18.918, 42.152)), (' A 502  CAM  C3 ', ' A 502  CAM  H82', -0.578, (18.425, 0.049, 0.129)), (' B 161  ARG  NH1', ' B 689  HOH  O  ', -0.545, (24.073, 18.997, 44.713)), (' A 163  PHE  HE2', ' A 246  LEU  CD1', -0.543, (20.021, 14.347, 3.951)), (' B 184  MET  HE1', ' B 247  VAL HG21', -0.542, (5.756, 6.237, 42.423)), (' A  41  ALA  O  ', ' A  44  VAL HG22', -0.526, (25.992, -16.904, 7.778)), (' A 373 AGLU  HG2', ' A 664  HOH  O  ', -0.512, (43.218, 12.187, 0.158)), (' B 502  CAM  C3 ', ' B 502  CAM  H92', -0.507, (7.542, 0.393, 36.278)), (' A 172 AGLU  CD ', ' A 172 AGLU  H  ', -0.505, (24.031, 21.713, 13.521)), (' B 150  PHE  CZ ', ' B 261  MET  HG3', -0.504, (28.744, 4.52, 42.069)), (' A 174  ILE  HB ', ' A 175  PRO  HD3', -0.5, (24.525, 15.1, 14.197)), (' B 502  CAM  C4 ', ' B 502  CAM  C8 ', -0.493, (10.109, 1.409, 36.04)), (' B 277  ARG  HB3', ' B 279  GLU  OE2', -0.48, (40.414, -0.161, 25.061)), (' B  41  ALA  O  ', ' B  44  VAL HG22', -0.48, (16.179, -16.706, 43.449)), (' A 181  THR  HA ', ' A 184  MET  HE3', -0.479, (16.353, 6.07, 8.684)), (' B 502  CAM  C5 ', ' B 502  CAM  H83', -0.479, (10.65, 2.134, 36.346)), (' A  98  PHE  HB3', ' A 244  LEU  HB2', -0.469, (14.107, 6.846, -0.339)), (' B 183  GLN  NE2', ' B 699  HOH  O  ', -0.467, (10.533, 4.145, 52.172)), (' B 502  CAM  H32', ' B 502  CAM  H92', -0.463, (7.133, 0.637, 35.977)), (' A 163  PHE  CZ ', ' A 246  LEU HD12', -0.463, (20.574, 13.503, 2.937)), (' A 502  CAM  C4 ', ' A 502  CAM  C9 ', -0.461, (20.721, 1.71, 0.37)), (' A 150  PHE  CZ ', ' A 261  MET  HG3', -0.455, (38.816, 4.221, 8.519)), (' B 184  MET  CE ', ' B 247  VAL HG21', -0.45, (6.053, 5.861, 42.578)), (' B  69  GLN  HG2', ' B  70  LEU HD12', -0.45, (8.702, -18.114, 26.042)), (' A 223  VAL HG13', ' A 241  MET  HE3', -0.447, (13.814, 14.959, -5.744)), (' B  99  ILE  CG1', ' B 103  MET  HE3', -0.447, (-2.883, 7.879, 32.455)), (' B 101  THR  CG2', ' B 501  HEM HAD2', -0.446, (5.879, 3.439, 31.996)), (' B 294  LEU  N  ', ' B 294  LEU HD23', -0.443, (17.504, -3.869, 37.204)), (' A 501  HEM  CMB', ' A 501  HEM HBB2', -0.443, (27.867, 0.491, 0.129)), (' B 502  CAM  H52', ' B 502  CAM  H83', -0.442, (10.534, 2.381, 35.873)), (' B 502  CAM  C10', ' B 502  CAM  C7 ', -0.439, (9.29, 1.164, 38.033)), (' B 114  LEU HD23', ' B 241  MET  HE1', -0.438, (0.895, 13.899, 29.03)), (' A 501  HEM  CMC', ' A 501  HEM HBC2', -0.437, (25.597, 8.685, -0.943)), (' B 501  HEM HBB2', ' B 501  HEM HMB1', -0.437, (17.498, 0.407, 34.671)), (' A 502  CAM  C10', ' A 502  CAM  C7 ', -0.436, (19.599, 0.902, 1.972)), (' B 271  ARG  HD2', ' B 381  PHE  CE1', -0.435, (37.282, 1.597, 41.2)), (' B 164  MET  CE ', ' B 169  LEU  HB2', -0.426, (12.359, 18.495, 42.649)), (' A  78  TYR  CD2', ' A 105  PRO  HD2', -0.425, (10.356, -2.851, -12.881)), (' B 350  PHE  HB3', ' B 357  CYS  HB3', -0.419, (13.792, 1.267, 29.055)), (' A 121  MET  HB3', ' A 122  PRO  HD3', -0.418, (28.831, 11.893, -13.34)), (' B 179  TYR  OH ', ' B 191  MET  HE3', -0.417, (6.218, 6.584, 55.021)), (' B 502  CAM  C5 ', ' B 502  CAM  C8 ', -0.408, (10.187, 2.107, 35.919)), (' B  17  HIS  CD2', ' B 313  LYS  HG2', -0.403, (-6.901, -20.334, 36.849))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
