# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   2 ', 'VAL', 0.011581403868380536, (128.107, 121.51, -19.079)), ('A', ' 119 ', 'ALA', 0.006980420666475505, (145.879, 105.32100000000001, 2.609)), ('B', ' 199 ', 'LYS', 0.022864329397800188, (123.69500000000006, 134.467, 22.86))]
data['omega'] = [('A', ' 152 ', 'PRO', None, (139.173, 108.877, -0.267)), ('A', ' 154 ', 'PRO', None, (136.002, 113.906, -2.216)), ('A', ' 194 ', 'PRO', None, (105.819, 111.349, 7.05)), ('B', '   8 ', 'PRO', None, (139.68, 145.244, 2.183)), ('B', '  95 ', 'PRO', None, (152.141, 136.353, -16.854)), ('B', ' 141 ', 'PRO', None, (124.27500000000008, 135.159, 16.075))]
data['rota'] = [('A', '   2 ', 'VAL', 0.27482371089653795, (128.107, 121.51, -19.079)), ('A', ' 185 ', 'SER', 0.07527099664841144, (120.44700000000006, 117.696, 7.248999999999999)), ('A', ' 200 ', 'CYS', 0.11590840904732705, (119.421, 111.23900000000002, 0.6479999999999999)), ('B', '   7 ', 'SER', 0.2677735101494629, (141.701, 144.503, 1.008)), ('C', '  58 ', 'GLN', 0.20253801925425424, (151.288, 142.589, -23.453))]
data['cbeta'] = []
data['probe'] = [(' B 147  LYS  NZ ', ' B 154  GLU  OE1', -0.976, (129.785, 120.398, 30.455)), (' A  81  MET  HE3', ' A  83  LEU HD21', -0.913, (148.846, 119.5, -12.104)), (' B  78  VAL HG11', ' B 104  LEU HD21', -0.717, (127.065, 141.033, 0.127)), (' A 140  MET  HE3', ' A 187  THR HG22', -0.691, (112.139, 122.71, 6.855)), (' B   8  PRO  HG2', ' B  11  LEU  CD1', -0.688, (136.25, 144.859, 2.912)), (' B 136  LEU HD11', ' B 196  ALA  HB2', -0.629, (122.604, 123.446, 20.23)), (' C  33  THR  O  ', ' C  37  VAL HG23', -0.626, (143.315, 142.492, -47.709)), (' B 193  THR HG22', ' B 208  SER  HB3', -0.617, (118.735, 113.372, 27.226)), (' A  83  LEU  HB3', ' A  86  LEU HD21', -0.611, (151.099, 115.89, -10.225)), (' B  33  ILE HG21', ' B  71  PHE  CD2', -0.598, (139.566, 146.833, -13.248)), (' C  74  THR  O  ', ' C  75  THR  OG1', -0.592, (153.384, 153.162, -42.236)), (' A  81  MET  HE3', ' A  83  LEU  CD2', -0.588, (148.818, 118.735, -12.387)), (' B 126  THR  O  ', ' B 126  THR HG22', -0.576, (124.602, 95.095, 11.699)), (' A 185  SER  HB2', ' B 135  PHE  CE2', -0.566, (120.493, 117.476, 9.516)), (' B  63  SER  O  ', ' B  73  LEU HD12', -0.557, (131.351, 144.836, -9.666)), (' A 207  SER  O  ', ' A 209  THR HG23', -0.552, (132.403, 102.825, -5.944)), (' B  55  ILE  HB ', ' B  58  ILE  CD1', -0.551, (127.802, 137.819, -16.214)), (' B 126  THR  CG2', ' B 126  THR  O  ', -0.549, (124.546, 94.583, 11.677)), (' A  12  VAL  O  ', ' A 116  VAL  HA ', -0.542, (147.996, 111.274, -3.093)), (' A  31  SER  HB2', ' C  62  TYR  CE2', -0.537, (141.989, 132.964, -30.268)), (' A 182  LEU  C  ', ' A 182  LEU HD12', -0.537, (128.28, 113.829, 6.257)), (' B 193  THR HG22', ' B 208  SER  CB ', -0.531, (118.879, 114.139, 26.882)), (' B  13  VAL HG21', ' B  78  VAL HG21', -0.526, (126.566, 143.974, 1.192)), (' A 197  THR  OG1', ' A 214  LYS  HD2', -0.526, (110.6, 107.513, 0.437)), (' B 183  LYS  O  ', ' B 187  GLU  HG2', -0.521, (125.922, 98.568, 23.159)), (' A 173  ALA  HA ', ' A 182  LEU  HB3', -0.515, (132.001, 115.552, 6.559)), (' C  34  VAL  O  ', ' C  38  ILE HG13', -0.511, (144.365, 138.374, -47.847)), (' B  76  ASN  O  ', ' B  77  SER  HB3', -0.508, (120.853, 145.709, -4.265)), (' B 115  VAL HG22', ' B 136  LEU  CD1', -0.507, (120.633, 123.324, 19.081)), (' A 119  ALA  HB3', ' A 151  PHE  CE2', -0.501, (144.285, 107.465, 2.218)), (' C  51  GLU  HG3', ' C  59  LEU  HB3', -0.489, (152.43, 140.013, -28.487)), (' B 195  GLU  HG2', ' B 206  VAL HG13', -0.488, (120.839, 120.24, 27.156)), (' B  11  LEU HD23', ' B  19  VAL  CG2', -0.487, (131.376, 144.388, 0.443)), (' A  33  TRP  CE3', ' A  50  GLU  HG3', -0.484, (147.901, 129.162, -23.563)), (' A 124  PRO  HB3', ' A 150  TYR  HB3', -0.479, (132.493, 107.415, 2.711)), (' B  61  ARG  NH1', ' B  82  ASP  OD1', -0.473, (123.65, 138.812, -5.458)), (' B  14  SER  O  ', ' B  17  GLU  HB2', -0.473, (123.302, 146.315, 3.862)), (' A 199  THR HG23', ' A 213  LYS  C  ', -0.468, (117.312, 106.938, 1.039)), (' B 146  VAL  O  ', ' B 146  VAL HG13', -0.466, (129.294, 120.742, 22.377)), (' C  44  SER  OG ', ' C  66  LEU  HA ', -0.464, (145.546, 141.03, -35.563)), (' A  17  SER  HB2', ' A  83  LEU  O  ', -0.457, (152.397, 112.451, -12.29)), (' B  78  VAL HG12', ' B  79  GLU  H  ', -0.451, (124.01, 140.399, -0.455)), (' A   1  GLN  N  ', ' A   1  GLN  OE1', -0.45, (124.57, 123.35, -22.979)), (' A 143  LEU  HB3', ' A 215  ILE HG21', -0.449, (115.107, 111.782, 7.808)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.448, (130.711, 136.764, -8.08)), (' A 128  PRO  HB3', ' A 215  ILE HD12', -0.448, (117.356, 108.168, 7.222)), (' A  51  ILE HD13', ' A  58  ALA  HB2', -0.446, (150.072, 122.971, -23.835)), (' A 155  VAL  CG2', ' A 182  LEU HD21', -0.443, (130.478, 114.28, 2.627)), (' A 124  PRO  HB2', ' A 147  VAL HG13', -0.443, (129.172, 108.329, 3.203)), (' B  61  ARG  HG3', ' B  76  ASN  O  ', -0.443, (121.895, 145.124, -5.446)), (' A 219  ASP  O  ', ' A 219  ASP  OD1', -0.442, (108.973, 101.538, 16.735)), (' C  82  CYS  HB2', ' C  83  PRO  HD2', -0.441, (156.304, 145.647, -30.703)), (' A  13  LYS  O  ', ' A  14  PRO  C  ', -0.437, (153.352, 109.298, -3.964)), (' A  51  ILE HD12', ' A  57  ARG  O  ', -0.436, (149.327, 124.439, -25.301)), (' A  17  SER  HB2', ' A  84  SER  HA ', -0.436, (153.316, 112.575, -11.91)), (' B  78  VAL HG12', ' B  79  GLU  N  ', -0.433, (123.844, 140.499, -0.142)), (' B  55  ILE  HB ', ' B  58  ILE HD12', -0.432, (127.674, 137.82, -16.271)), (' B  78  VAL  CG1', ' B 104  LEU HD21', -0.43, (126.343, 140.801, 0.022)), (' B  93  ARG HH12', ' C  58  GLN  HG2', -0.429, (152.597, 145.78, -21.804)), (' B  55  ILE  HB ', ' B  58  ILE HD13', -0.428, (128.237, 138.106, -15.773)), (' B 211  ARG  HG2', ' B 211  ARG HH11', -0.425, (119.124, 100.814, 25.158)), (' B 125  LEU  C  ', ' B 127  SER  H  ', -0.424, (125.514, 97.541, 14.039)), (' A  39  GLN HE22', ' B  38  GLN HE22', -0.423, (137.166, 127.298, -5.665)), (' A  52  ILE  O  ', ' A  52  ILE HG23', -0.422, (147.699, 125.244, -28.483)), (' B 187  GLU  HA ', ' B 187  GLU  OE1', -0.421, (122.889, 99.414, 24.523)), (' A 193  TRP  CD1', ' A 194  PRO  HA ', -0.421, (107.811, 111.522, 5.661)), (' B 188  ARG  O  ', ' B 189  HIS  CG ', -0.417, (125.94, 103.865, 29.886)), (' B  12  SER  HB3', ' B 107  LYS  HE2', -0.416, (129.301, 143.032, 8.838)), (' A  63  LYS  HD2', ' A  63  LYS  O  ', -0.412, (158.207, 130.305, -7.886)), (' A 201  ASN  ND2', ' A 212  ASP  OD1', -0.411, (119.277, 108.898, -4.396)), (' A  52  ILE HG21', ' C  49  LEU HD11', -0.408, (149.309, 128.298, -29.577)), (' A 152  PRO  HD2', ' A 206  ALA  CB ', -0.408, (138.352, 108.32, -3.314)), (' B 193  THR HG22', ' B 208  SER  OG ', -0.407, (119.021, 114.483, 27.575)), (' C  79  GLY  O  ', ' C 201  MTN  H41', -0.406, (154.021, 150.758, -26.354)), (' B  15  PRO  HD3', ' B 107  LYS  O  ', -0.406, (122.5, 142.019, 8.151)), (' B 113  PRO  HG3', ' B 144  ILE HD11', -0.405, (122.315, 127.222, 19.384)), (' B 210  ASN  O  ', ' B 212  ASN  N  ', -0.405, (115.737, 104.591, 25.011)), (' B  14  SER  O  ', ' B  15  PRO  C  ', -0.401, (121.577, 144.744, 4.034))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
