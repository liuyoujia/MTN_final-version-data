# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 510 ', 'HIS', 0.027301589807725523, (35.757000000000005, 58.776, 43.861))]
data['omega'] = []
data['rota'] = [('A', '  15 ', 'ILE', 0.097039814161236, (23.02, 43.915000000000006, 10.764)), ('A', ' 163 ', 'LYS', 0.25318157035955496, (45.376000000000005, 14.978, 26.809)), ('A', ' 232 ', 'THR', 0.2970899629274261, (7.486000000000001, 16.352999999999987, 8.851)), ('A', ' 274 ', 'ASP', 0.07049835229438643, (16.167, 51.787, 14.437)), ('A', ' 340 ', 'LEU', 0.0019441289103924988, (34.436, 19.212, 1.328)), ('A', ' 424 ', 'PHE', 0.2905480681573776, (9.248000000000003, 45.24399999999999, 31.223999999999997)), ('A', ' 472 ', 'ILE', 0.10994297374154112, (18.831, 19.455, 37.492))]
data['cbeta'] = []
data['probe'] = [(" A 704  BOG H8'3", " A 705  BOG H8'2", -0.776, (43.029, 21.416, 35.889)), (' A  42  ALA  HB2', ' A 234  ASP  HB3', -0.754, (7.501, 14.494, 15.557)), (' A 241  PRO  O  ', ' A 245  ILE HD12', -0.748, (10.225, 20.417, 27.102)), (" A 704  BOG H8'3", " A 705  BOG  C8'", -0.731, (42.745, 20.925, 35.579)), (' A 217  GLU  HG3', ' A 222  THR HG22', -0.72, (19.25, 8.772, -3.454)), (' A 129  GLU  C  ', ' A 129  GLU  OE1', -0.688, (40.739, 5.495, 4.668)), (' A  51  PHE  CZ ', ' A  56  ILE HD11', -0.683, (11.626, 36.086, 14.454)), (' A  91  LYS  NZ ', ' A 583  HOH  O  ', -0.676, (26.812, 52.538, 41.485)), (' A 129  GLU  OE1', ' A 130  PRO  C  ', -0.651, (40.373, 3.769, 3.947)), (' A 129  GLU  OE1', ' A 130  PRO  O  ', -0.642, (40.203, 4.586, 3.649)), (' A 274  ASP  HB2', ' A 441  ILE HG13', -0.592, (14.804, 52.015, 12.163)), (' A 129  GLU  CD ', ' A 130  PRO  O  ', -0.59, (40.051, 4.594, 2.896)), (' A 245  ILE  HA ', ' A 463  LEU HD11', -0.585, (11.72, 24.161, 27.611)), (' A  45  ILE  HB ', ' A  46  PRO  HD3', -0.574, (6.516, 21.321, 17.507)), (' A 256  SER  HG ', ' A 601  LEU  N  ', -0.573, (24.011, 33.794, 19.242)), (' A 321  ASN  ND2', ' A 540  HOH  O  ', -0.558, (31.344, 11.355, 19.654)), (' A   8  TRP  CD1', ' A  14  LEU HD13', -0.557, (25.42, 47.992, 15.226)), (' A 472  ILE  N  ', ' A 473  PRO  HD2', -0.556, (16.826, 18.273, 37.316)), (' A 214  PHE  CZ ', ' A 227  LEU HD11', -0.555, (17.426, 19.274, 1.101)), (' A 435  GLU  OE2', ' A 438  ARG  NH2', -0.555, (16.022, 54.511, 23.342)), (' A 136  ASP  O  ', ' A 140  ILE HD12', -0.55, (32.054, 1.037, 7.166)), (' A  42  ALA  HB1', ' A 237  LYS  HB2', -0.548, (7.102, 15.611, 18.687)), (' A 443  LYS  NZ ', ' A 573  HOH  O  ', -0.538, (2.316, 54.868, 14.465)), (' A 409  THR HG22', ' A 467  TRP  CZ2', -0.537, (18.863, 23.815, 29.552)), (' A 137  PRO  HA ', ' A 140  ILE HD12', -0.528, (30.949, 2.184, 7.166)), (' A  11  ARG HH12', ' A 274  ASP  HB3', -0.518, (17.024, 51.06, 11.549)), (' A 129  GLU  OE2', ' A 130  PRO  O  ', -0.515, (39.525, 3.829, 2.692)), (' A 214  PHE  CE1', ' A 227  LEU HD11', -0.512, (17.509, 19.113, 1.254)), (' A 241  PRO  C  ', ' A 245  ILE HD12', -0.5, (10.208, 19.361, 27.667)), (' A 154  VAL HG13', ' A 155  PRO  HD2', -0.499, (37.467, 11.087, 26.341)), (' A 510  HIS  ND1', ' A 510  HIS  O  ', -0.491, (37.771, 60.159, 42.588)), (' A 327  LEU HD23', ' A 344  TRP  CE2', -0.476, (29.665, 19.043, 8.289)), (' A 130  PRO  HG3', ' A 144  PHE  HE2', -0.464, (37.02, 7.624, 6.658)), (' A 405  PHE  CZ ', ' A 410  ILE HD11', -0.464, (20.052, 23.035, 33.53)), (' A 185  ARG  HG2', ' A 185  ARG HH11', -0.463, (43.168, 46.072, 14.35)), (' A 361  GLN  N  ', ' A 362  PRO  CD ', -0.456, (32.015, 40.508, 24.201)), (' A 103  VAL  HA ', ' A 106  ILE HD12', -0.451, (34.045, 31.221, 31.038)), (' A 405  PHE  CE1', ' A 410  ILE HD11', -0.45, (20.241, 22.668, 33.052)), (' A 106  ILE HG12', ' A 389  SER  HB2', -0.448, (38.211, 30.95, 30.812)), (' A  80  ILE  O  ', ' A  84  LEU  HG ', -0.448, (18.862, 49.202, 32.865)), (' A 405  PHE  CZ ', ' A 410  ILE  CG1', -0.448, (20.852, 23.814, 34.05)), (' A 472  ILE  N  ', ' A 473  PRO  CD ', -0.445, (17.216, 18.308, 38.215)), (' A 388  PHE  HE2', ' A 489  TYR  HH ', -0.443, (41.574, 30.592, 36.149)), (' A  66  GLY  O  ', ' A 267  SER  HA ', -0.433, (23.596, 50.065, 23.748)), (' A 272  ASP  HB3', ' A 560  HOH  O  ', -0.433, (17.876, 59.786, 17.917)), (' A 511  GLU  C  ', ' A 526  HOH  O  ', -0.431, (32.358, 61.746, 42.037)), (' A  31  PHE  HB3', ' A  32  PRO  HD3', -0.431, (21.857, 23.005, 13.82)), (' A 129  GLU  OE1', ' A 130  PRO  N  ', -0.431, (40.294, 5.087, 4.87)), (' A 259  PHE  CZ ', ' A 412  VAL HG11', -0.43, (23.103, 31.489, 26.407)), (' A  88  ARG  NH2', ' A 595  HOH  O  ', -0.429, (21.58, 52.102, 45.323)), (' A 299  ILE  HB ', ' A 300  PRO  HD3', -0.426, (19.673, 17.059, 8.029)), (' A 199  MET  HB2', ' A 200  PRO  HD3', -0.423, (28.495, 38.607, 5.426)), (' A 392  LEU HD13', " A 704  BOG H8'1", -0.417, (41.109, 23.396, 35.554)), (' A 124  VAL  O  ', ' A 124  VAL HG12', -0.417, (48.019, 17.794, 4.084)), (' A  56  ILE HG22', ' A  60  TRP  CZ3', -0.416, (9.419, 40.817, 17.822)), (' A 264  THR  HB ', ' A 569  HOH  O  ', -0.412, (28.194, 42.57, 23.471)), (' A 104  VAL  HA ', ' A 107  TYR  CE2', -0.41, (30.134, 28.156, 27.686)), (' A  77  THR  OG1', ' A  97  GLY  HA3', -0.409, (24.762, 41.294, 32.111)), (' A 254  THR  OG1', ' A 290  GLU  OE1', -0.407, (20.65, 28.751, 15.79)), (' A 413  VAL HG21', ' A 467  TRP  HZ3', -0.405, (16.081, 26.996, 29.645)), (' A  65  MET  HE3', ' A  84  LEU  CD1', -0.403, (17.221, 46.195, 31.224)), (' A 228  ASN  O  ', ' A 232  THR  HB ', -0.402, (9.186, 14.655, 8.168)), (' A 392  LEU  CD1', " A 704  BOG H8'1", -0.401, (40.641, 23.042, 35.445)), (' A 506  ARG  HG2', ' A 506  ARG HH11', -0.4, (33.171, 50.085, 45.59))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
